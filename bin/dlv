#!/usr/bin/env elixir

defmodule YTDL do
  def start(parent, input) do
    {md5_return, 0} = System.cmd("md5", ["-s", input])
    hash = hd Regex.run(~r/= (.+)\n/, md5_return, capture: :all_but_first)
    cache = ".dlv/#{hash}.cache"
    File.write!(cache, input)
    Task.start(fn -> YTDL.dl(%{input: input, parent: parent, cache: cache}) end)
  end
  def dl(st) do
    %{input: input} = st
    input = "--newline --no-warnings #{input}"
    input = if File.exists?("youtube-dl.config") do
      "--config-location youtube-dl.config #{input}"
    else
      input
    end
    filename = String.trim get_filename(input, st)
    IO.puts "FILE: #{filename}"
    Port.open({:spawn, "youtube-dl #{input}"},
              [:binary, :exit_status, :stderr_to_stdout])
    |> YTDL.receive(Map.put(st, :filename, filename))
  end
  def get_filename(input, st) do
    fn_pid = Port.open({:spawn, "youtube-dl --get-filename #{input}"},
                       [:binary, :exit_status, :stderr_to_stdout])
    YTDL.get_filename(fn_pid, input, st)
  end
  def get_filename(pid, input, st) do
    receive do
      {^pid, {:data, filename}} -> YTDL.get_filename(pid, input, Map.put(st, :filename, filename))
      {^pid, {:exit_status, ecode}} ->
        if ecode == 0 do
          YTDL.exit(:filename, st)
          Map.get(st, :filename)
        else
          YTDL.exit(ecode, st)
          raise "ERROR: `youtube-dl --get-filename` exited with #{ecode}."
        end
      {:EXIT, ^pid, reason} ->
        IO.puts("GET_FILENAME EXIT: #{reason}")
    end
  end
  def receive(ytdl, st) do
    receive do
      {^ytdl, {:data, line}} ->
        YTDL.progress(st, line)
        YTDL.receive(ytdl, st)
      {^ytdl, {:exit_status, ecode}} ->
        IO.puts "EXIT#: #{ecode}"
        YTDL.exit(ecode, st)
      {:EXIT, ^ytdl, reason} ->
        IO.puts("YTDL EXIT: #{reason}")
        YTDL.exit(reason, st)
    end
  end
  def exit(ecode_or_reason, st) do
    %{cache: cache, parent: parent, filename: filename} = st
    if ecode_or_reason != :filename do
      send parent, {:ytdl_exit, filename}
    end
    if ecode_or_reason == 0 or ecode_or_reason == :normal do
      %{filename: filename} = st
      clean_filename = Regex.replace(~r/(^(\[.*?\])+ *|\.mp4-)/, filename, "")
      :ok = File.rename(filename, clean_filename)
      File.rm!(cache)
    end
  end
  def progress(st, line) do
    %{filename: filename, parent: parent} = st
    dl_info = Regex.replace(~r<\[download\]\s+>, line, "")
    if Regex.match?(~r<^\[download\]>, line) do
      send parent, {:progress, filename, dl_info}
    else
      IO.puts("<#{String.trim(filename)}>:\n#{line}")
    end
  end
end

defmodule PRLL do
  def start(tui, files, max_procs) do
    Task.start(fn -> loop(%{tui: tui, queue: files, max: max_procs, num_procs: 0}) end)
  end
  def loop(st) do
    %{tui: tui, queue: queue, max: max, num_procs: num_procs} = st
    if num_procs < max and List.first(queue) do
      {next, queue_} = List.pop_at(queue, -1)
      YTDL.start(self(), next)
      loop(st |> Map.put(:queue, queue_) |> Map.update!(:num_procs, &(&1+1)))
    else
      receive do
        {:proc, input} -> loop(Map.update! st, :queue, &([input | &1]))
        {:ytdl_exit, filename} -> send tui, {:exit, filename}; loop(Map.update! st, :num_procs, &(&1-1))
        {:progress, filename, line} -> send tui, {:progress, filename, line}; loop(st)
        other -> IO.inspect other; loop(st)
      end
    end
  end
end

defmodule TUI do
  @home Path.expand("~")
  def start() do
    Task.start(fn -> loop(%{}) end)
  end
  def loop(st) do
    receive do
      {:exit, _key} -> loop(st)
      {:progress, key, value} -> IO.puts "<#{key}>:\n#{value}"; loop(st)
    end
  end
end

defmodule DLV do
  def read_stdin(_prll, :eof) do
    IO.puts "END OF FILE, DLV DONE"
    caches = Path.wildcard(".dlv/*.cache") |> Enum.map(&File.read!/1)
    if caches != [] do
      IO.puts "[dlv] INCOMPLETE DOWNLOADS:"
      Enum.each(caches, &IO.puts/1)
    end
    parts = Path.wildcard("**/*.part")
    if parts != [] do
      IO.puts "[ytdl] PARTIAL DOWNLOADS:"
      Enum.each(parts, &IO.puts/1)
    end
    exit(:shutdown)
  end
  def read_stdin(_prll, {:error, reason}) do
    IO.puts "ERROR: #{reason}"
  end
  def read_stdin(prll, input) do
    if String.trim(input) != "" do
      send prll, {:proc, input}
    end
    DLV.read_stdin(prll)
  end
  def read_stdin(prll) do
    DLV.read_stdin(prll, IO.read(:stdio, :line))
  end

  def main([]) do
    main(["8"])
  end
  def main([num_procs]) do
    File.mkdir(".dlv")
    paths = Path.wildcard(".dlv/*.cache") |> Enum.map(&(File.read! &1))
    {:ok, tui} = TUI.start()
    {:ok, prll} = PRLL.start(tui, IO.inspect(paths), elem(Integer.parse(num_procs), 0))
    DLV.read_stdin(prll)
  end
end

DLV.main(System.argv())
