#!/usr/bin/env ruby

require "cli.rb"

require "json"
require "tempfile"
require "shellwords"
require "pp"

module RbReadline
  require "rb-readline"
  require "readline"
  def self.prefill_prompt(str)
    @rl_prefill = str
    @rl_startup_hook = :rl_prefill_hook
  end
  def self.rl_prefill_hook
    rl_insert_text @rl_prefill if @rl_prefill
    @rl_startup_hook = nil
  end
end

class String
  def colorize(color_code, end_code=0)
    "\e[#{color_code}m#{self}\e[#{end_code}m"
  end
  def reverse() colorize(7, 27) end
end

def hash_diff(x, y)
  Hash[*(x.size > y.size ? x.to_a - y.to_a : y.to_a - x.to_a).flatten(1)]
end

def execute(cmd)
  puts cmd if $options[:dry_run] or $options[:verbose]
  system(cmd) if not $options[:dry_run]
end

Dir["/Users/#{%x[whoami].strip}/dotfiles/lib/ruby/music/*.cmd.rb"]
  .each { |file| require file }

class MusicCMDs extend MusicCMD end

# NOTE: [[~/dotfiles/wiki/zsh_completion.wiki]]
CLI.parse!(MusicCMDs) { |opts|
  opts.on("-z", "--zsh-completions", "print zsh completion") do
    cmds = (MusicCMDs.methods - Object.methods).map(&:to_s).join " "
    puts ["_arguments", "-s", "-S",
          "-h[Print this help document]",
          "--help[Print this help document]",
          "-v[Print more, for debugging]",
          "--verbose[Print more, for debugging]",
          "-n[Dry Run / Simulation, prints commands instead of executing.]",
          "--dry-run[Dry Run / Simulation, prints commands instead of executing.]",
          "1:cmd:(#{cmds})", "*:::arg:{_normal}"
    ].join "&"
    $options[:helped] = true
  end
}
